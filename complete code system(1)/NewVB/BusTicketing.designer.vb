'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="BusTicketing")>  _
Partial Public Class BusTicketingDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertbus(instance As bus)
    End Sub
  Partial Private Sub Updatebus(instance As bus)
    End Sub
  Partial Private Sub Deletebus(instance As bus)
    End Sub
  Partial Private Sub InsertBus_Scheduling(instance As Bus_Scheduling)
    End Sub
  Partial Private Sub UpdateBus_Scheduling(instance As Bus_Scheduling)
    End Sub
  Partial Private Sub DeleteBus_Scheduling(instance As Bus_Scheduling)
    End Sub
  Partial Private Sub Insertpayment(instance As payment)
    End Sub
  Partial Private Sub Updatepayment(instance As payment)
    End Sub
  Partial Private Sub Deletepayment(instance As payment)
    End Sub
  Partial Private Sub InsertRoute(instance As Route)
    End Sub
  Partial Private Sub UpdateRoute(instance As Route)
    End Sub
  Partial Private Sub DeleteRoute(instance As Route)
    End Sub
  Partial Private Sub InsertStaff(instance As Staff)
    End Sub
  Partial Private Sub UpdateStaff(instance As Staff)
    End Sub
  Partial Private Sub DeleteStaff(instance As Staff)
    End Sub
  Partial Private Sub InsertTicket(instance As Ticket)
    End Sub
  Partial Private Sub UpdateTicket(instance As Ticket)
    End Sub
  Partial Private Sub DeleteTicket(instance As Ticket)
    End Sub
  Partial Private Sub InsertAdmin(instance As Admin)
    End Sub
  Partial Private Sub UpdateAdmin(instance As Admin)
    End Sub
  Partial Private Sub DeleteAdmin(instance As Admin)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.NewVB.My.MySettings.Default.BusTicketingConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property bus() As System.Data.Linq.Table(Of bus)
		Get
			Return Me.GetTable(Of bus)
		End Get
	End Property
	
	Public ReadOnly Property Bus_Schedulings() As System.Data.Linq.Table(Of Bus_Scheduling)
		Get
			Return Me.GetTable(Of Bus_Scheduling)
		End Get
	End Property
	
	Public ReadOnly Property payments() As System.Data.Linq.Table(Of payment)
		Get
			Return Me.GetTable(Of payment)
		End Get
	End Property
	
	Public ReadOnly Property Routes() As System.Data.Linq.Table(Of Route)
		Get
			Return Me.GetTable(Of Route)
		End Get
	End Property
	
	Public ReadOnly Property Staffs() As System.Data.Linq.Table(Of Staff)
		Get
			Return Me.GetTable(Of Staff)
		End Get
	End Property
	
	Public ReadOnly Property Tickets() As System.Data.Linq.Table(Of Ticket)
		Get
			Return Me.GetTable(Of Ticket)
		End Get
	End Property
	
	Public ReadOnly Property Admins() As System.Data.Linq.Table(Of Admin)
		Get
			Return Me.GetTable(Of Admin)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.bus")>  _
Partial Public Class bus
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _busID As String
	
	Private _busPlateNum As String
	
	Private _busSeatAmount As Integer
	
	Private _insuranceDate As Date
	
	Private _busRoadTax As String
	
	Private _busStatus As String
	
	Private _Bus_Schedulings As EntitySet(Of Bus_Scheduling)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbusIDChanging(value As String)
    End Sub
    Partial Private Sub OnbusIDChanged()
    End Sub
    Partial Private Sub OnbusPlateNumChanging(value As String)
    End Sub
    Partial Private Sub OnbusPlateNumChanged()
    End Sub
    Partial Private Sub OnbusSeatAmountChanging(value As Integer)
    End Sub
    Partial Private Sub OnbusSeatAmountChanged()
    End Sub
    Partial Private Sub OninsuranceDateChanging(value As Date)
    End Sub
    Partial Private Sub OninsuranceDateChanged()
    End Sub
    Partial Private Sub OnbusRoadTaxChanging(value As String)
    End Sub
    Partial Private Sub OnbusRoadTaxChanged()
    End Sub
    Partial Private Sub OnbusStatusChanging(value As String)
    End Sub
    Partial Private Sub OnbusStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bus_Schedulings = New EntitySet(Of Bus_Scheduling)(AddressOf Me.attach_Bus_Schedulings, AddressOf Me.detach_Bus_Schedulings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_busID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property busID() As String
		Get
			Return Me._busID
		End Get
		Set
			If (String.Equals(Me._busID, value) = false) Then
				Me.OnbusIDChanging(value)
				Me.SendPropertyChanging
				Me._busID = value
				Me.SendPropertyChanged("busID")
				Me.OnbusIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_busPlateNum", DbType:="VarChar(8) NOT NULL", CanBeNull:=false)>  _
	Public Property busPlateNum() As String
		Get
			Return Me._busPlateNum
		End Get
		Set
			If (String.Equals(Me._busPlateNum, value) = false) Then
				Me.OnbusPlateNumChanging(value)
				Me.SendPropertyChanging
				Me._busPlateNum = value
				Me.SendPropertyChanged("busPlateNum")
				Me.OnbusPlateNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_busSeatAmount", DbType:="Int NOT NULL")>  _
	Public Property busSeatAmount() As Integer
		Get
			Return Me._busSeatAmount
		End Get
		Set
			If ((Me._busSeatAmount = value)  _
						= false) Then
				Me.OnbusSeatAmountChanging(value)
				Me.SendPropertyChanging
				Me._busSeatAmount = value
				Me.SendPropertyChanged("busSeatAmount")
				Me.OnbusSeatAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_insuranceDate", DbType:="Date NOT NULL")>  _
	Public Property insuranceDate() As Date
		Get
			Return Me._insuranceDate
		End Get
		Set
			If ((Me._insuranceDate = value)  _
						= false) Then
				Me.OninsuranceDateChanging(value)
				Me.SendPropertyChanging
				Me._insuranceDate = value
				Me.SendPropertyChanged("insuranceDate")
				Me.OninsuranceDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_busRoadTax", DbType:="Char(5) NOT NULL", CanBeNull:=false)>  _
	Public Property busRoadTax() As String
		Get
			Return Me._busRoadTax
		End Get
		Set
			If (String.Equals(Me._busRoadTax, value) = false) Then
				Me.OnbusRoadTaxChanging(value)
				Me.SendPropertyChanging
				Me._busRoadTax = value
				Me.SendPropertyChanged("busRoadTax")
				Me.OnbusRoadTaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_busStatus", DbType:="VarChar(12) NOT NULL", CanBeNull:=false)>  _
	Public Property busStatus() As String
		Get
			Return Me._busStatus
		End Get
		Set
			If (String.Equals(Me._busStatus, value) = false) Then
				Me.OnbusStatusChanging(value)
				Me.SendPropertyChanging
				Me._busStatus = value
				Me.SendPropertyChanged("busStatus")
				Me.OnbusStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="bus_Bus_Scheduling", Storage:="_Bus_Schedulings", ThisKey:="busID", OtherKey:="busID")>  _
	Public Property Bus_Schedulings() As EntitySet(Of Bus_Scheduling)
		Get
			Return Me._Bus_Schedulings
		End Get
		Set
			Me._Bus_Schedulings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Bus_Schedulings(ByVal entity As Bus_Scheduling)
		Me.SendPropertyChanging
		entity.bus = Me
	End Sub
	
	Private Sub detach_Bus_Schedulings(ByVal entity As Bus_Scheduling)
		Me.SendPropertyChanging
		entity.bus = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Bus Scheduling]")>  _
Partial Public Class Bus_Scheduling
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _bsID As String
	
	Private _routeID As String
	
	Private _busID As String
	
	Private _staffID As String
	
	Private _bsDate As Date
	
	Private _bsTime As String
	
	Private _bsSeatAvailable As String
	
	Private _Tickets As EntitySet(Of Ticket)
	
	Private _bus As EntityRef(Of bus)
	
	Private _Route As EntityRef(Of Route)
	
	Private _Staff As EntityRef(Of Staff)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbsIDChanging(value As String)
    End Sub
    Partial Private Sub OnbsIDChanged()
    End Sub
    Partial Private Sub OnrouteIDChanging(value As String)
    End Sub
    Partial Private Sub OnrouteIDChanged()
    End Sub
    Partial Private Sub OnbusIDChanging(value As String)
    End Sub
    Partial Private Sub OnbusIDChanged()
    End Sub
    Partial Private Sub OnstaffIDChanging(value As String)
    End Sub
    Partial Private Sub OnstaffIDChanged()
    End Sub
    Partial Private Sub OnbsDateChanging(value As Date)
    End Sub
    Partial Private Sub OnbsDateChanged()
    End Sub
    Partial Private Sub OnbsTimeChanging(value As String)
    End Sub
    Partial Private Sub OnbsTimeChanged()
    End Sub
    Partial Private Sub OnbsSeatAvailableChanging(value As String)
    End Sub
    Partial Private Sub OnbsSeatAvailableChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Tickets = New EntitySet(Of Ticket)(AddressOf Me.attach_Tickets, AddressOf Me.detach_Tickets)
		Me._bus = CType(Nothing, EntityRef(Of bus))
		Me._Route = CType(Nothing, EntityRef(Of Route))
		Me._Staff = CType(Nothing, EntityRef(Of Staff))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bsID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property bsID() As String
		Get
			Return Me._bsID
		End Get
		Set
			If (String.Equals(Me._bsID, value) = false) Then
				Me.OnbsIDChanging(value)
				Me.SendPropertyChanging
				Me._bsID = value
				Me.SendPropertyChanged("bsID")
				Me.OnbsIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_routeID", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property routeID() As String
		Get
			Return Me._routeID
		End Get
		Set
			If (String.Equals(Me._routeID, value) = false) Then
				If Me._Route.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnrouteIDChanging(value)
				Me.SendPropertyChanging
				Me._routeID = value
				Me.SendPropertyChanged("routeID")
				Me.OnrouteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_busID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property busID() As String
		Get
			Return Me._busID
		End Get
		Set
			If (String.Equals(Me._busID, value) = false) Then
				If Me._bus.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnbusIDChanging(value)
				Me.SendPropertyChanging
				Me._busID = value
				Me.SendPropertyChanged("busID")
				Me.OnbusIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property staffID() As String
		Get
			Return Me._staffID
		End Get
		Set
			If (String.Equals(Me._staffID, value) = false) Then
				If Me._Staff.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnstaffIDChanging(value)
				Me.SendPropertyChanging
				Me._staffID = value
				Me.SendPropertyChanged("staffID")
				Me.OnstaffIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bsDate", DbType:="Date NOT NULL")>  _
	Public Property bsDate() As Date
		Get
			Return Me._bsDate
		End Get
		Set
			If ((Me._bsDate = value)  _
						= false) Then
				Me.OnbsDateChanging(value)
				Me.SendPropertyChanging
				Me._bsDate = value
				Me.SendPropertyChanged("bsDate")
				Me.OnbsDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bsTime", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property bsTime() As String
		Get
			Return Me._bsTime
		End Get
		Set
			If (String.Equals(Me._bsTime, value) = false) Then
				Me.OnbsTimeChanging(value)
				Me.SendPropertyChanging
				Me._bsTime = value
				Me.SendPropertyChanged("bsTime")
				Me.OnbsTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bsSeatAvailable", DbType:="VarChar(3) NOT NULL", CanBeNull:=false)>  _
	Public Property bsSeatAvailable() As String
		Get
			Return Me._bsSeatAvailable
		End Get
		Set
			If (String.Equals(Me._bsSeatAvailable, value) = false) Then
				Me.OnbsSeatAvailableChanging(value)
				Me.SendPropertyChanging
				Me._bsSeatAvailable = value
				Me.SendPropertyChanged("bsSeatAvailable")
				Me.OnbsSeatAvailableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bus_Scheduling_Ticket", Storage:="_Tickets", ThisKey:="bsID", OtherKey:="bsID")>  _
	Public Property Tickets() As EntitySet(Of Ticket)
		Get
			Return Me._Tickets
		End Get
		Set
			Me._Tickets.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="bus_Bus_Scheduling", Storage:="_bus", ThisKey:="busID", OtherKey:="busID", IsForeignKey:=true)>  _
	Public Property bus() As bus
		Get
			Return Me._bus.Entity
		End Get
		Set
			Dim previousValue As bus = Me._bus.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._bus.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._bus.Entity = Nothing
					previousValue.Bus_Schedulings.Remove(Me)
				End If
				Me._bus.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bus_Schedulings.Add(Me)
					Me._busID = value.busID
				Else
					Me._busID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("bus")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Route_Bus_Scheduling", Storage:="_Route", ThisKey:="routeID", OtherKey:="routeID", IsForeignKey:=true)>  _
	Public Property Route() As Route
		Get
			Return Me._Route.Entity
		End Get
		Set
			Dim previousValue As Route = Me._Route.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Route.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Route.Entity = Nothing
					previousValue.Bus_Schedulings.Remove(Me)
				End If
				Me._Route.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bus_Schedulings.Add(Me)
					Me._routeID = value.routeID
				Else
					Me._routeID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Route")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Staff_Bus_Scheduling", Storage:="_Staff", ThisKey:="staffID", OtherKey:="staffID", IsForeignKey:=true)>  _
	Public Property Staff() As Staff
		Get
			Return Me._Staff.Entity
		End Get
		Set
			Dim previousValue As Staff = Me._Staff.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Staff.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Staff.Entity = Nothing
					previousValue.Bus_Schedulings.Remove(Me)
				End If
				Me._Staff.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bus_Schedulings.Add(Me)
					Me._staffID = value.staffID
				Else
					Me._staffID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Staff")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Tickets(ByVal entity As Ticket)
		Me.SendPropertyChanging
		entity.Bus_Scheduling = Me
	End Sub
	
	Private Sub detach_Tickets(ByVal entity As Ticket)
		Me.SendPropertyChanging
		entity.Bus_Scheduling = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.payment")>  _
Partial Public Class payment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _payID As String
	
	Private _payAmount As Decimal
	
	Private _payDate As Date
	
	Private _Tickets As EntitySet(Of Ticket)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpayIDChanging(value As String)
    End Sub
    Partial Private Sub OnpayIDChanged()
    End Sub
    Partial Private Sub OnpayAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnpayAmountChanged()
    End Sub
    Partial Private Sub OnpayDateChanging(value As Date)
    End Sub
    Partial Private Sub OnpayDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Tickets = New EntitySet(Of Ticket)(AddressOf Me.attach_Tickets, AddressOf Me.detach_Tickets)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_payID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property payID() As String
		Get
			Return Me._payID
		End Get
		Set
			If (String.Equals(Me._payID, value) = false) Then
				Me.OnpayIDChanging(value)
				Me.SendPropertyChanging
				Me._payID = value
				Me.SendPropertyChanged("payID")
				Me.OnpayIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_payAmount", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property payAmount() As Decimal
		Get
			Return Me._payAmount
		End Get
		Set
			If ((Me._payAmount = value)  _
						= false) Then
				Me.OnpayAmountChanging(value)
				Me.SendPropertyChanging
				Me._payAmount = value
				Me.SendPropertyChanged("payAmount")
				Me.OnpayAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_payDate", DbType:="Date NOT NULL")>  _
	Public Property payDate() As Date
		Get
			Return Me._payDate
		End Get
		Set
			If ((Me._payDate = value)  _
						= false) Then
				Me.OnpayDateChanging(value)
				Me.SendPropertyChanging
				Me._payDate = value
				Me.SendPropertyChanged("payDate")
				Me.OnpayDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="payment_Ticket", Storage:="_Tickets", ThisKey:="payID", OtherKey:="payID")>  _
	Public Property Tickets() As EntitySet(Of Ticket)
		Get
			Return Me._Tickets
		End Get
		Set
			Me._Tickets.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Tickets(ByVal entity As Ticket)
		Me.SendPropertyChanging
		entity.payment = Me
	End Sub
	
	Private Sub detach_Tickets(ByVal entity As Ticket)
		Me.SendPropertyChanging
		entity.payment = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Route")>  _
Partial Public Class Route
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _routeID As String
	
	Private _routeStartPoint As String
	
	Private _routeEndPoint As String
	
	Private _routeBusFare As Decimal
	
	Private _Bus_Schedulings As EntitySet(Of Bus_Scheduling)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnrouteIDChanging(value As String)
    End Sub
    Partial Private Sub OnrouteIDChanged()
    End Sub
    Partial Private Sub OnrouteStartPointChanging(value As String)
    End Sub
    Partial Private Sub OnrouteStartPointChanged()
    End Sub
    Partial Private Sub OnrouteEndPointChanging(value As String)
    End Sub
    Partial Private Sub OnrouteEndPointChanged()
    End Sub
    Partial Private Sub OnrouteBusFareChanging(value As Decimal)
    End Sub
    Partial Private Sub OnrouteBusFareChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bus_Schedulings = New EntitySet(Of Bus_Scheduling)(AddressOf Me.attach_Bus_Schedulings, AddressOf Me.detach_Bus_Schedulings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_routeID", DbType:="NChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property routeID() As String
		Get
			Return Me._routeID
		End Get
		Set
			If (String.Equals(Me._routeID, value) = false) Then
				Me.OnrouteIDChanging(value)
				Me.SendPropertyChanging
				Me._routeID = value
				Me.SendPropertyChanged("routeID")
				Me.OnrouteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_routeStartPoint", DbType:="NChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property routeStartPoint() As String
		Get
			Return Me._routeStartPoint
		End Get
		Set
			If (String.Equals(Me._routeStartPoint, value) = false) Then
				Me.OnrouteStartPointChanging(value)
				Me.SendPropertyChanging
				Me._routeStartPoint = value
				Me.SendPropertyChanged("routeStartPoint")
				Me.OnrouteStartPointChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_routeEndPoint", DbType:="NChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property routeEndPoint() As String
		Get
			Return Me._routeEndPoint
		End Get
		Set
			If (String.Equals(Me._routeEndPoint, value) = false) Then
				Me.OnrouteEndPointChanging(value)
				Me.SendPropertyChanging
				Me._routeEndPoint = value
				Me.SendPropertyChanged("routeEndPoint")
				Me.OnrouteEndPointChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_routeBusFare", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property routeBusFare() As Decimal
		Get
			Return Me._routeBusFare
		End Get
		Set
			If ((Me._routeBusFare = value)  _
						= false) Then
				Me.OnrouteBusFareChanging(value)
				Me.SendPropertyChanging
				Me._routeBusFare = value
				Me.SendPropertyChanged("routeBusFare")
				Me.OnrouteBusFareChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Route_Bus_Scheduling", Storage:="_Bus_Schedulings", ThisKey:="routeID", OtherKey:="routeID")>  _
	Public Property Bus_Schedulings() As EntitySet(Of Bus_Scheduling)
		Get
			Return Me._Bus_Schedulings
		End Get
		Set
			Me._Bus_Schedulings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Bus_Schedulings(ByVal entity As Bus_Scheduling)
		Me.SendPropertyChanging
		entity.Route = Me
	End Sub
	
	Private Sub detach_Bus_Schedulings(ByVal entity As Bus_Scheduling)
		Me.SendPropertyChanging
		entity.Route = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Staff")>  _
Partial Public Class Staff
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _staffID As String
	
	Private _staffName As String
	
	Private _staffIC As String
	
	Private _staffGender As String
	
	Private _staffPhNum As String
	
	Private _staffEmail As String
	
	Private _staffPosition As String
	
	Private _staffStatus As String
	
	Private _password As String
	
	Private _Bus_Schedulings As EntitySet(Of Bus_Scheduling)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstaffIDChanging(value As String)
    End Sub
    Partial Private Sub OnstaffIDChanged()
    End Sub
    Partial Private Sub OnstaffNameChanging(value As String)
    End Sub
    Partial Private Sub OnstaffNameChanged()
    End Sub
    Partial Private Sub OnstaffICChanging(value As String)
    End Sub
    Partial Private Sub OnstaffICChanged()
    End Sub
    Partial Private Sub OnstaffGenderChanging(value As String)
    End Sub
    Partial Private Sub OnstaffGenderChanged()
    End Sub
    Partial Private Sub OnstaffPhNumChanging(value As String)
    End Sub
    Partial Private Sub OnstaffPhNumChanged()
    End Sub
    Partial Private Sub OnstaffEmailChanging(value As String)
    End Sub
    Partial Private Sub OnstaffEmailChanged()
    End Sub
    Partial Private Sub OnstaffPositionChanging(value As String)
    End Sub
    Partial Private Sub OnstaffPositionChanged()
    End Sub
    Partial Private Sub OnstaffStatusChanging(value As String)
    End Sub
    Partial Private Sub OnstaffStatusChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bus_Schedulings = New EntitySet(Of Bus_Scheduling)(AddressOf Me.attach_Bus_Schedulings, AddressOf Me.detach_Bus_Schedulings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property staffID() As String
		Get
			Return Me._staffID
		End Get
		Set
			If (String.Equals(Me._staffID, value) = false) Then
				Me.OnstaffIDChanging(value)
				Me.SendPropertyChanging
				Me._staffID = value
				Me.SendPropertyChanged("staffID")
				Me.OnstaffIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffName", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property staffName() As String
		Get
			Return Me._staffName
		End Get
		Set
			If (String.Equals(Me._staffName, value) = false) Then
				Me.OnstaffNameChanging(value)
				Me.SendPropertyChanging
				Me._staffName = value
				Me.SendPropertyChanged("staffName")
				Me.OnstaffNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffIC", DbType:="VarChar(14) NOT NULL", CanBeNull:=false)>  _
	Public Property staffIC() As String
		Get
			Return Me._staffIC
		End Get
		Set
			If (String.Equals(Me._staffIC, value) = false) Then
				Me.OnstaffICChanging(value)
				Me.SendPropertyChanging
				Me._staffIC = value
				Me.SendPropertyChanged("staffIC")
				Me.OnstaffICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffGender", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property staffGender() As String
		Get
			Return Me._staffGender
		End Get
		Set
			If (String.Equals(Me._staffGender, value) = false) Then
				Me.OnstaffGenderChanging(value)
				Me.SendPropertyChanging
				Me._staffGender = value
				Me.SendPropertyChanged("staffGender")
				Me.OnstaffGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffPhNum", DbType:="VarChar(11) NOT NULL", CanBeNull:=false)>  _
	Public Property staffPhNum() As String
		Get
			Return Me._staffPhNum
		End Get
		Set
			If (String.Equals(Me._staffPhNum, value) = false) Then
				Me.OnstaffPhNumChanging(value)
				Me.SendPropertyChanging
				Me._staffPhNum = value
				Me.SendPropertyChanged("staffPhNum")
				Me.OnstaffPhNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffEmail", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property staffEmail() As String
		Get
			Return Me._staffEmail
		End Get
		Set
			If (String.Equals(Me._staffEmail, value) = false) Then
				Me.OnstaffEmailChanging(value)
				Me.SendPropertyChanging
				Me._staffEmail = value
				Me.SendPropertyChanged("staffEmail")
				Me.OnstaffEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffPosition", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property staffPosition() As String
		Get
			Return Me._staffPosition
		End Get
		Set
			If (String.Equals(Me._staffPosition, value) = false) Then
				Me.OnstaffPositionChanging(value)
				Me.SendPropertyChanging
				Me._staffPosition = value
				Me.SendPropertyChanged("staffPosition")
				Me.OnstaffPositionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffStatus", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property staffStatus() As String
		Get
			Return Me._staffStatus
		End Get
		Set
			If (String.Equals(Me._staffStatus, value) = false) Then
				Me.OnstaffStatusChanging(value)
				Me.SendPropertyChanging
				Me._staffStatus = value
				Me.SendPropertyChanged("staffStatus")
				Me.OnstaffStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Staff_Bus_Scheduling", Storage:="_Bus_Schedulings", ThisKey:="staffID", OtherKey:="staffID")>  _
	Public Property Bus_Schedulings() As EntitySet(Of Bus_Scheduling)
		Get
			Return Me._Bus_Schedulings
		End Get
		Set
			Me._Bus_Schedulings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Bus_Schedulings(ByVal entity As Bus_Scheduling)
		Me.SendPropertyChanging
		entity.Staff = Me
	End Sub
	
	Private Sub detach_Bus_Schedulings(ByVal entity As Bus_Scheduling)
		Me.SendPropertyChanging
		entity.Staff = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Ticket")>  _
Partial Public Class Ticket
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ticketID As String
	
	Private _seatNumber As String
	
	Private _bsID As String
	
	Private _payID As String
	
	Private _Bus_Scheduling As EntityRef(Of Bus_Scheduling)
	
	Private _payment As EntityRef(Of payment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnticketIDChanging(value As String)
    End Sub
    Partial Private Sub OnticketIDChanged()
    End Sub
    Partial Private Sub OnseatNumberChanging(value As String)
    End Sub
    Partial Private Sub OnseatNumberChanged()
    End Sub
    Partial Private Sub OnbsIDChanging(value As String)
    End Sub
    Partial Private Sub OnbsIDChanged()
    End Sub
    Partial Private Sub OnpayIDChanging(value As String)
    End Sub
    Partial Private Sub OnpayIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bus_Scheduling = CType(Nothing, EntityRef(Of Bus_Scheduling))
		Me._payment = CType(Nothing, EntityRef(Of payment))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ticketID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ticketID() As String
		Get
			Return Me._ticketID
		End Get
		Set
			If (String.Equals(Me._ticketID, value) = false) Then
				Me.OnticketIDChanging(value)
				Me.SendPropertyChanging
				Me._ticketID = value
				Me.SendPropertyChanged("ticketID")
				Me.OnticketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_seatNumber", DbType:="VarChar(3) NOT NULL", CanBeNull:=false)>  _
	Public Property seatNumber() As String
		Get
			Return Me._seatNumber
		End Get
		Set
			If (String.Equals(Me._seatNumber, value) = false) Then
				Me.OnseatNumberChanging(value)
				Me.SendPropertyChanging
				Me._seatNumber = value
				Me.SendPropertyChanged("seatNumber")
				Me.OnseatNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bsID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property bsID() As String
		Get
			Return Me._bsID
		End Get
		Set
			If (String.Equals(Me._bsID, value) = false) Then
				If Me._Bus_Scheduling.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnbsIDChanging(value)
				Me.SendPropertyChanging
				Me._bsID = value
				Me.SendPropertyChanged("bsID")
				Me.OnbsIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_payID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property payID() As String
		Get
			Return Me._payID
		End Get
		Set
			If (String.Equals(Me._payID, value) = false) Then
				If Me._payment.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnpayIDChanging(value)
				Me.SendPropertyChanging
				Me._payID = value
				Me.SendPropertyChanged("payID")
				Me.OnpayIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bus_Scheduling_Ticket", Storage:="_Bus_Scheduling", ThisKey:="bsID", OtherKey:="bsID", IsForeignKey:=true)>  _
	Public Property Bus_Scheduling() As Bus_Scheduling
		Get
			Return Me._Bus_Scheduling.Entity
		End Get
		Set
			Dim previousValue As Bus_Scheduling = Me._Bus_Scheduling.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Bus_Scheduling.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Bus_Scheduling.Entity = Nothing
					previousValue.Tickets.Remove(Me)
				End If
				Me._Bus_Scheduling.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tickets.Add(Me)
					Me._bsID = value.bsID
				Else
					Me._bsID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Bus_Scheduling")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="payment_Ticket", Storage:="_payment", ThisKey:="payID", OtherKey:="payID", IsForeignKey:=true)>  _
	Public Property payment() As payment
		Get
			Return Me._payment.Entity
		End Get
		Set
			Dim previousValue As payment = Me._payment.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._payment.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._payment.Entity = Nothing
					previousValue.Tickets.Remove(Me)
				End If
				Me._payment.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tickets.Add(Me)
					Me._payID = value.payID
				Else
					Me._payID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("payment")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Admin")>  _
Partial Public Class Admin
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _adminID As String
	
	Private _adminPass As String
	
	Private _adminIC As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnadminIDChanging(value As String)
    End Sub
    Partial Private Sub OnadminIDChanged()
    End Sub
    Partial Private Sub OnadminPassChanging(value As String)
    End Sub
    Partial Private Sub OnadminPassChanged()
    End Sub
    Partial Private Sub OnadminICChanging(value As String)
    End Sub
    Partial Private Sub OnadminICChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adminID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property adminID() As String
		Get
			Return Me._adminID
		End Get
		Set
			If (String.Equals(Me._adminID, value) = false) Then
				Me.OnadminIDChanging(value)
				Me.SendPropertyChanging
				Me._adminID = value
				Me.SendPropertyChanged("adminID")
				Me.OnadminIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adminPass", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property adminPass() As String
		Get
			Return Me._adminPass
		End Get
		Set
			If (String.Equals(Me._adminPass, value) = false) Then
				Me.OnadminPassChanging(value)
				Me.SendPropertyChanging
				Me._adminPass = value
				Me.SendPropertyChanged("adminPass")
				Me.OnadminPassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adminIC", DbType:="VarChar(14) NOT NULL", CanBeNull:=false)>  _
	Public Property adminIC() As String
		Get
			Return Me._adminIC
		End Get
		Set
			If (String.Equals(Me._adminIC, value) = false) Then
				Me.OnadminICChanging(value)
				Me.SendPropertyChanging
				Me._adminIC = value
				Me.SendPropertyChanged("adminIC")
				Me.OnadminICChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
